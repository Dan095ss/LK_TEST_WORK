import os

import pygame
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from rich.prompt import Prompt

from db_init import init_database
from data_load import load_versions, load_vulnerabilities
from secure import compress_file, decompress_file
from vuln_check import get_safe_version, check_vulnerabilities

import re

from packaging import version

import pygame

DB_NAME = 'test.sqlite'
VERSIONS_FILE = 'json/versions.json'
VULNERABILITIES_FILE = 'json/vulnerabilities.json'

pygame.mixer.init()

console = Console()


def validate_product_name(product_name):
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –ø—É—Å—Ç–æ–µ –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    if not product_name or not re.match(r"^[a-zA-Z0-9\s\-\(\)]+$", product_name):
        raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ —Å–∫–æ–±–∫–∏.")


def validate_version(version_str):
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤–µ—Ä—Å–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É X.Y.Z
    try:
        version.parse(version_str)
    except Exception:
        raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: {version_str}. –û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç X.Y.Z.")


def print_vulnerabilities_table(results, terminal_supports_links):
    if not results:
        console.print("[bold green]–£—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! ‚úÖ[/]")
        return

    play_alert_sound()

    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏
    if not terminal_supports_links:
        console.print("[bold yellow]–í–Ω–∏–º–∞–Ω–∏–µ:[/] –í–∞—à —Ç–µ—Ä–º–∏–Ω–∞–ª –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏. "
                      "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∏–∂–µ.")
        console.print()

    table = Table(title="‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ ‚ö†Ô∏è", show_lines=True)
    table.add_column("KLA ID", style="cyan", justify="center")  # –°—Å—ã–ª–∫–∞ –Ω–∞ KLA ID
    table.add_column("–û–ø–∏—Å–∞–Ω–∏–µ", style="magenta", justify="left")
    table.add_column("–î–∞—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", style="yellow", justify="center")
    table.add_column("–£—è–∑–≤–∏–º–æ —Å –º–∞–∂–æ—Ä–∞", style="red", justify="center")
    table.add_column("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≤–µ—Ä—Å–∏–∏", style="green", justify="center")

    for row in results:
        kla_id, description, publish_date, start_ver, fixed_ver = row

        major_version = start_ver.split('.')[0] + '.'

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
        if terminal_supports_links:
            kla_id_link = f"[link=https://threats.kaspersky.com/en/vulnerability/{kla_id}]{kla_id}[/link]"
        else:
            kla_id_link = f"{kla_id} (https://threats.kaspersky.com/en/vulnerability/{kla_id})"

        table.add_row(
            kla_id_link,
            description,
            publish_date,
            f"[bold red]{major_version}[/]",
            f"[bold green]{fixed_ver}[/]"
        )

    console.print(table)


def check_terminal_support():
    # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –≥–∏–ø–µ—Ä—Å—Å—ã–ª–æ–∫ —Ç–µ—Ä–º–∏–Ω–∞–ª–æ–º.
    if not console.is_terminal:
        console.print("[bold yellow]–í–Ω–∏–º–∞–Ω–∏–µ:[/] –í–∞—à —Ç–µ—Ä–º–∏–Ω–∞–ª –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏. "
                      "–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, Windows Terminal, iTerm2).")
        console.print()
        return False
    return True


def play_main_theme():
    try:
        pygame.mixer.music.load("sounds/main_theme.mp3")
        pygame.mixer.music.play(-1)
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ–ª–æ–¥–∏–∏: {e}[/]")


def play_alert_sound():
    try:
        pygame.mixer.music.stop()
        pygame.mixer.music.load("sounds/alert_sound.mp3")
        pygame.mixer.music.play()
        while pygame.mixer.music.get_busy():
            pygame.time.Clock().tick(10)
        play_main_theme()
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}[/]")


def exit_sound():
    try:
        pygame.mixer.music.stop()
        pygame.mixer.music.load("sounds/exit_sound.mp3")
        pygame.mixer.music.play()
        while pygame.mixer.music.get_busy():
            pygame.time.Clock().tick(10)
    except Exception as e:
        console.print(f"[bold red]–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}[/]")


def print_easter_egg():
    console.print(Panel(
        "[bold magenta]–í—ã –Ω–∞—à–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω—É—é –ø–∞—Å—Ö–∞–ª–∫—É! üéâ\n\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –º–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ:)!\n"
        "–°—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫–∏, –ø–æ–¥–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª.. –æ–π, —è —á—Ç–æ-—Ç–æ –ø–µ—Ä–µ–ø—É—Ç–∞–ªüòä[/]",
        title="üéâ –°–µ–∫—Ä–µ—Ç–Ω–∞—è –ø–∞—Å—Ö–∞–ª–∫–∞! üéâ",
        style="on black"
    ))


def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
    terminal_supports_links = check_terminal_support()

    play_main_theme()

    console.print(Panel("[bold green]SUPER PUPER DUPER ULTRA [bold cyan]Vulnerability Checker[/] v1.0[/]",
                        title="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!", subtitle="–ó–∞—â–∏—Ç–∏—Ç–µ —Å–≤–æ–∏ —Å–∏—Å—Ç–µ–º—ã!"))

    if not os.path.exists(DB_NAME) and not os.path.exists(DB_NAME + ".zlib"):
        try:
            console.print("[bold yellow]–ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫: –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é...[/]")
            conn = init_database(DB_NAME)
        except Exception as e:
            console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}[/]")
            return
    elif os.path.exists(DB_NAME + ".zlib"):
        try:
            # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
            decompress_file(DB_NAME + ".zlib")
            conn = init_database(DB_NAME)
        except Exception as e:
            console.print(f"[bold red]–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}[/]")
            return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    loaded_versions = load_versions(conn, VERSIONS_FILE)
    loaded_vulns = load_vulnerabilities(conn, VULNERABILITIES_FILE)

    if loaded_versions == 0 or loaded_vulns == 0:
        console.print("[bold red]–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª—ã JSON.[/]")
        return

    console.print(f"[green]–ó–∞–≥—Ä—É–∂–µ–Ω–æ {loaded_versions} –≤–µ—Ä—Å–∏–π –∏ {loaded_vulns} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π.[/]")

    while True:
        console.print("\n[bold cyan]–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:[/]")
        console.print("1. üîç –ù–∞–π—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞")
        console.print("2. üïµÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –ø–æ –ø—Ä–æ–¥—É–∫—Ç—É –∏ –≤–µ—Ä—Å–∏–∏")
        console.print("3. üö™ –í—ã–π—Ç–∏")

        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

        if choice.lower() == "kaspersky":
            print_easter_egg()
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –º–µ–Ω—é
        if choice not in ["1", "2", "3"]:
            console.print("[bold red]–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.[/]")
            continue

        if choice == "1":
            product = Prompt.ask("[bold yellow]–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞[/]").strip()
            try:
                validate_product_name(product)
            except ValueError as e:
                console.print(f"[bold red]{e}[/]")
                continue

            first_safe_version, last_version = get_safe_version(conn, product)
            if first_safe_version:
                console.print(Panel(
                    f"‚úÖ –ü–µ—Ä–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è: [bold green]{first_safe_version}[/]\n"
                    f"–í—Å–µ –±–æ–ª–µ–µ –Ω–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ —Ç–∞–∫–∂–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã (–ø–æ—Å–ª–µ–¥–Ω—è—è –¥–æ—Å—Ç—É–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è: [bold green]{last_version}[/]).",
                    title="–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞!"
                ))
            else:
                console.print("[bold red]‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –≤–µ—Ä—Å–∏—é.[/]")

        elif choice == "2":
            product = Prompt.ask("[bold yellow]–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞[/]").strip()
            version = Prompt.ask("[bold yellow]–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä—Å–∏—é[/]").strip()

            try:
                validate_product_name(product)
                validate_version(version)
            except ValueError as e:
                console.print(f"[bold red]{e}[/]")
                continue

            results = check_vulnerabilities(conn, product, version)

            if not results:
                console.print(Panel(f"‚úÖ –£ –ø—Ä–æ–¥—É–∫—Ç–∞ '{product}' –≤ –≤–µ—Ä—Å–∏–∏ '{version}' —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                                    title="–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω"))
            else:
                print_vulnerabilities_table(results, terminal_supports_links)

        elif choice == "3":
            console.print("[bold magenta]–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ –º–∞—Ç—Ä–∏—Ü—É... üö™[/]")
            exit_sound()
            pygame.mixer.music.stop()

            compress_file(DB_NAME)

            break

    conn.close()


if __name__ == "__main__":
    main()
